- import demos.action._

- val metricsApiKey = at[String]("metricsViewerApiKey")

!!! 5
html
  head
    != antiCsrfMeta
    != xitrumCss

    meta(content="text/html; charset=utf-8" http-equiv="content-type")
    title Welcome to Xitrum

    link(rel="shortcut icon" href={publicUrl("favicon.ico")})

    link(type="text/css" rel="stylesheet" media="all" href={webJarsUrl("bootstrap-css/3.3.6/css", "bootstrap.css", "bootstrap.min.css")})
    link(type="text/css" rel="stylesheet" media="all" href={publicUrl("app.css")})

  body
    .container
      .navbar.navbar-inverse
        .navbar-brand
          a(href={url[SiteIndex]}) Xitrum Demos
        ul.nav.navbar-nav
          li
            a(href="https://github.com/xitrum-framework/xitrum-demos/tree/master/src/main") Source code
          li
            a(href="http://xitrum-framework.github.io/") Xitrum Homepage
          li
            a(href="http://xitrum-framework.github.io/guide.html") Xitrum Guide
          li
            a(href="http://xitrum-framework.github.io/api.html") API Doc
          li
            a(href="https://github.com/xitrum-framework/xitrum-new") New Project Skeleton
          li
            a(href="https://groups.google.com/group/xitrum-framework") Google Group

    .container
      .col-md-9
        #flash
          !~ jsRenderFlash()

        != renderedView

        hr
        h3 Source code of current action
        div
          -# fileName is only, for example, Articles.scala, not /full/path/to/Articles.scala
          - val fileName = SourceCode.getSourceFileName(currentAction.getClass.getName)
          b= "demos/action/" + fileName
          pre(id="actionSrc" class="prettyprint linenums:1 lang-scala")
            ~~ SourceCode.getFileContent("src/main/scala/demos/action/" + fileName)

      .col-md-3
        p REST
        ul
          li
            a(href={url[ArticlesIndex]}) index
          li
            a(href={url[ArticlesShow]("id" -> 1)}) show
          li
            a(href={url[ArticlesEdit]("id" -> 1)}) edit
          li
            a(href={url[ArticlesNew]}) new

        p Async
        ul
          li
            a(href={url[ActorActionDemo]}) ActorAction (delayed 3s)
          li
            a(href={url[WebSocketChat]}) WebSocket chat
          li
            a(href={url[SockJsChat]}) SockJS chat

        p Filters
        ul
          li
            a(href={url[BeforeFilter]}) Before filter
          li
            a(href={url[AfterFilter]}) After filter
          li
            a(href={url[AroundFilter]}) Around filter

        p Cache
        ul
          li
            a(href={url[ActionCacheDemo]}) Action cache
          li
            a(href={url[PageCacheDemo]}) Page cache

        p Scalate
        ul
          li
            a(href={url[ScalateJadeString]}) Template from string
          li
            a(href={url[ScalateMustache]}) Mustache template

        p Various demos
        ul
          li
            a(href={url[Upload]}) File upload
          li
            a(href={url[CompoMain]("param1" -> "value1", "param" -> "value2")}) Component
          li
            a(href={url[ArticlesDotShow]("id" -> 1, "format" -> "foo")}) Dot in path
          li
            a(href={url[ForwardDemo]}) forwardTo
          li
            a(href={url[GetPost]}) Multiple routes to an action
          li
            a(href={url[JsonPost]}) Json POST parse action
          li
            a(href={url[TodosIndex]}) Knockout.js
          li
            a(href={url[OpenIdLogin]}) OpenID login
          li
            a(href={url[FileMonitorEvents]}) File monitor

        p Special demos
        ul
          li
            a(href={url[SwaggerDemo]}) Swagger demo
          li
            a(href={url[xitrum.metrics.XitrumMetricsViewer]("api_key" -> metricsApiKey)}) Metrics

    != jsDefaults
    script(src={publicUrl("run_prettify.js")})
    != jsForView
